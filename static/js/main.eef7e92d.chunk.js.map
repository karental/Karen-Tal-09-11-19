{"version":3,"sources":["back.jpg","day.jpg","actions/index.js","comps/CitySearch.js","comps/MainCard.js","comps/Loading.js","comps/DailyCards.js","comps/HomePage.js","comps/Favorites.js","comps/WeatherNavbar.js","App.js","serviceWorker.js","reducers/weatherReducer.js","reducers/cityAutoCompleteReducer.js","reducers/cityKeyReducer.js","reducers/unitReducer.js","reducers/cityNameReducer.js","reducers/FavoritesReducer.js","reducers/getLocalStorage.js","reducers/favoritesWeatherReducer.js","reducers/FromFavo.js","reducers/index.js","index.js"],"names":["module","exports","updateUnit","unit","dispatch","type","setUnit","setTrueFromFavorite","isTrue","cameFromFavorites","loadWeather","key","fetch","then","r","json","weather","cityKey","i","icon","DailyForecasts","Day","Icon","toString","length","timestamp","EpochDate","xx","Date","setTime","toUTCString","day","getDay","days","map","d","indexOf","weekday","setWeather","setCityAutocomplete","citySuggtions","loadCity","city","data","setCityName","cityName","getCityName","Name","getDefaultCity","geoplugin_city","addFavorite","favorite","localStorage","removeItem","getFavoritesFromLocalStorage","favoriteSTR","JSON","stringify","setItem","myFavorites","getFavorite","getItem","favoritesArrayFromStorage","parse","getFavoritesWeather","favoritesWeather","loadFavoriteWeather","favoriteKeys","name","push","CitySearch","props","state","searchInput","showing","Form","style","margin","width","className","data-background-color","FormGroup","display","Input","onChange","this","handleText","bind","placeholder","value","id","citysuggetions","c","onClick","clickedText","Key","LocalizedName","Button","color","getweather","ev","setState","target","innerHTML","cityInput","React","Component","mapDispatchToProps","connect","citySuggetions","cityWeather","MainCard","addToFavorites","disabled","currweather","Card","CardBody","CardTitle","tag","currCity","CardSubtitle","Headline","Text","src","CardText","Temperature","Minimum","Value","Unit","addToFavorite","myCity","myFavoritesArr","favorites","Loading","Daily","w","HomePage","Favorites","prevProps","favoritesArray","undefined","console","log","backgroundColor","goHome","class","getFavWeather","removeFromFavorites","history","myRemoved","filter","myfaveArray","WeatherNavbar","unitType","prevState","Navbar","expand","Container","UncontrolledCollapse","navbar","toggler","NavbarBrand","Nav","NavItem","NavLink","href","process","changeUnit","path","component","fromFavorites","Night","require","App","hour","getHours","document","body","backgroundImage","Boolean","window","location","hostname","match","INITIAL_STATE","allReducers","combineReducers","action","CityKey","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eef7e92d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/back.8f803e2a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/day.c819dfae.jpg\";","function setUnit(unit) {\r\n    return {\r\n        type: \"SET_UNIT\",\r\n        unit\r\n    }\r\n}\r\n\r\nexport const updateUnit = (unit) => {\r\n    \r\n    return dispatch => {\r\n        dispatch(setUnit(unit))\r\n    }\r\n}\r\n\r\n\r\nfunction cameFromFavorites(isTrue) {\r\n    return {\r\n        type: \"SET_TRUE\",\r\n        isTrue\r\n    }\r\n}\r\n\r\nexport const setTrueFromFavorite = (isTrue) => {\r\n    return dispatch => {\r\n        dispatch(cameFromFavorites(isTrue))\r\n    }\r\n}\r\n\r\n\r\nfunction setWeather(weather) {\r\n    return {\r\n        type: 'SET_WEATHER',\r\n        weather\r\n    }\r\n}\r\n\r\n\r\nexport const loadWeather = (key, unit) => {\r\n    return dispatch => {\r\n        fetch(`http://dataservice.accuweather.com/forecasts/v1/daily/5day/${key}?apikey=hwxDTxNOPGPd7zeoqPEikNUDPmD0vtLG&metric=${unit}`)\r\n            .then(r => r.json())\r\n            .then(weather => {\r\n                weather.cityKey = key\r\n                for (let i = 0; i < weather.DailyForecasts.length; i++) {\r\n\r\n                    var icon = weather.DailyForecasts[i].Day.Icon\r\n                    icon = icon.toString().length\r\n                    if (icon === 1) {\r\n                        weather.DailyForecasts[i].Day.Icon = `https://developer.accuweather.com/sites/default/files/0${weather.DailyForecasts[i].Day.Icon}-s.png`\r\n                    } else {\r\n                        weather.DailyForecasts[i].Day.Icon = `https://developer.accuweather.com/sites/default/files/${weather.DailyForecasts[i].Day.Icon}-s.png`\r\n                    }\r\n                    var timestamp = weather.DailyForecasts[i].EpochDate;\r\n                    var xx = new Date();\r\n                    xx.setTime(timestamp * 1000);\r\n                    xx.toUTCString()\r\n                    var day = xx.getDay();\r\n                    var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n                    days.map(d => {\r\n                        if (day === days.indexOf(d)) {\r\n                            var weekday = d;\r\n                            weather.DailyForecasts[i].weekday = weekday\r\n                        }\r\n                    })\r\n                }\r\n                dispatch(setWeather(weather))\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction setCityAutocomplete(citySuggtions) {\r\n    return {\r\n        type: 'SET_SUGGETIONS',\r\n        citySuggtions\r\n    }\r\n}\r\n\r\nexport const loadCity = (city) => {\r\n    return dispatch => {\r\n        if (city === '') {\r\n            var citySuggtions = []\r\n            dispatch(setCityAutocomplete(citySuggtions))\r\n        } else {\r\n            fetch(`http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=hwxDTxNOPGPd7zeoqPEikNUDPmD0vtLG&q=${city}`)\r\n                .then(r => r.json())\r\n                .then(data => {\r\n                    dispatch(setCityAutocomplete(data))\r\n                })\r\n\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction setCityName(cityName) {\r\n    return {\r\n        type: 'GET_CITY_NAME',\r\n        cityName\r\n    }\r\n}\r\n\r\nexport const getCityName = (Name) => {\r\n    return dispatch => {\r\n        if (Name === '') {\r\n        } else {\r\n            dispatch(setCityName(Name))\r\n        }\r\n    }\r\n}\r\n\r\nexport const getDefaultCity = () => {\r\n    return dispatch => {\r\n        fetch(`http://www.geoplugin.net/json.gp`)\r\n            .then(r => r.json())\r\n            .then(data => {\r\n                dispatch(setCityName(data.geoplugin_city))\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport const addFavorite = (favorite) => {\r\n    return dispatch => {\r\n        if (!favorite.length) {\r\n            localStorage.removeItem('MyFavorites');\r\n            dispatch(getFavoritesFromLocalStorage(favorite))\r\n            return\r\n        } else {\r\n           var favoriteSTR = JSON.stringify(favorite)\r\n            localStorage.setItem('MyFavorites', favoriteSTR);\r\n            dispatch(getFavoritesFromLocalStorage(favorite))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction getFavoritesFromLocalStorage(myFavorites) {\r\n    return {\r\n        type: 'GET_FAVORITES',\r\n        myFavorites\r\n    }\r\n}\r\n\r\nexport const getFavorite = () => {\r\n    return dispatch => {\r\n        var favoritesFromStorage = []\r\n        if (localStorage.getItem('MyFavorites') === null) {\r\n            dispatch(getFavoritesFromLocalStorage(favoritesFromStorage))\r\n        } else {\r\n            var favoritesArrayFromStorage = localStorage.getItem('MyFavorites')\r\n            favoritesArrayFromStorage = JSON.parse(favoritesArrayFromStorage)\r\n            dispatch(getFavoritesFromLocalStorage(favoritesArrayFromStorage))\r\n        }\r\n    }\r\n}\r\n\r\nfunction getFavoritesWeather(favoritesWeather) {\r\n    return {\r\n        type: 'GET_FAVORITES_WEATHER',\r\n        favoritesWeather\r\n    }\r\n}\r\n\r\nexport const loadFavoriteWeather = (favoriteKeys, unit) => {\r\n    return dispatch => {\r\n        var favoritesWeather = []\r\n        for (let i = 0; i < favoriteKeys.length; i++) {\r\n            fetch(`https://dataservice.accuweather.com/forecasts/v1/daily/1day/${favoriteKeys[i].key}?apikey=hwxDTxNOPGPd7zeoqPEikNUDPmD0vtLG&metric=${unit}`)\r\n                .then(r => r.json())\r\n                .then(weather => {\r\n                    weather.DailyForecasts[0].city = favoriteKeys[i].name\r\n                    weather.DailyForecasts[0].key = favoriteKeys[i].key\r\n\r\n                    for (let i = 0; i < weather.DailyForecasts.length; i++) {\r\n                        var icon = weather.DailyForecasts[i].Day.Icon\r\n                        icon = icon.toString().length\r\n                        if (icon === 1) {\r\n                            weather.DailyForecasts[i].Day.Icon = `https://developer.accuweather.com/sites/default/files/0${weather.DailyForecasts[i].Day.Icon}-s.png`\r\n                        } else {\r\n                            weather.DailyForecasts[i].Day.Icon = `https://developer.accuweather.com/sites/default/files/${weather.DailyForecasts[i].Day.Icon}-s.png`\r\n                        }\r\n                        favoritesWeather.push(weather)\r\n                        if (favoritesWeather.length !== favoriteKeys.length) {\r\n                        } else {\r\n                            dispatch(getFavoritesWeather(favoritesWeather))\r\n                        }\r\n                    }\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    FormGroup,\r\n    Form,\r\n    Input,\r\n    Button,\r\n    FormText\r\n} from \"reactstrap\";\r\nimport { connect } from 'react-redux'\r\nimport { loadCity, getCityName, loadWeather, setTrueFromFavorite } from '../actions'\r\n\r\n\r\nclass CitySearch extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cityKey: \"\",\r\n            searchInput: '',\r\n            showing: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Form style={{ margin: 'auto', width: '100rem' }} className=\"form-inline ml-auto\" data-background-color=\"\">\r\n                    <FormGroup style={{ margin: 'auto', display: 'inline' }} className=\"has-white\">\r\n                        <div className='autocomplete'>\r\n                            <Input\r\n                                onChange={this.handleText.bind(this)}\r\n                                placeholder=\"Search\"\r\n                                type=\"text\"\r\n                                name='cityInput'\r\n                                className='cityInput'\r\n                                value={this.state.searchInput}\r\n                                style={{ width: '50rem' }}\r\n                            ></Input>\r\n                            <ul id='input'>\r\n                                {this.props.citysuggetions.map(c =>\r\n                                    <li className='autoText' onClick={this.clickedText.bind(this, c.Key)}>{c.LocalizedName}</li>\r\n                                )}\r\n                            </ul>\r\n                \r\n                        </div>\r\n                        <Button className='searchButton' color=\"primary\" onClick={this.getweather.bind(this)}>\r\n                            <i className=\"fas fa-search\"></i>\r\n                        </Button>\r\n                        <div style={{ display: (this.state.showing ? 'block' : 'none') }} >\r\n                                <h6>  Oops, can't find your location      </h6>    </div>\r\n                    </FormGroup>\r\n                    \r\n                </Form>\r\n           \r\n            </>\r\n        );\r\n    }\r\n    handleText(ev) {\r\n        this.setState({ showing: false })\r\n        this.setState({ searchInput: ev.target.value })\r\n        const { loadCity, setTrueFromFavorite } = this.props;\r\n        loadCity(ev.target.value);\r\n        setTrueFromFavorite(true);\r\n\r\n    }\r\n\r\n\r\n    clickedText(key, ev) {\r\n        this.setState({ searchInput: ev.target.innerHTML })\r\n        this.setState({ cityKey: key })\r\n        this.setState({ city: ev.target.innerHTML })\r\n        this.setState({ cityInput: ev.target.innerHTML })\r\n    }\r\n\r\n    getweather() {\r\n        \r\n        if (this.state.cityKey === \"\" || this.state.cityKey !== this.state.cityKey) {\r\n            for (let i = 0; i < this.props.citysuggetions.length; i++) {\r\n                if (this.state.searchInput === this.props.citysuggetions[i].LocalizedName) {\r\n                    this.state.cityKey = this.props.citysuggetions[i].Key\r\n                    break\r\n                } else {\r\n                }\r\n            }\r\n        }\r\n        if (this.state.cityKey === \"\") {\r\n            this.setState({ showing: true })\r\n        } else {\r\n            const { loadWeather, getCityName } = this.props\r\n            getCityName(this.state.searchInput);\r\n            this.setState({ searchInput: '' })\r\n            loadWeather(this.state.cityKey, this.props.unit)\r\n            const { loadCity } = this.props;\r\n            loadCity('');\r\n        }\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        citysuggetions: state.citySuggetions.citySuggetions,\r\n        cityWeather: state.weather,\r\n        unit: state.unit.unit,\r\n        cityName: state.cityName.cityName\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadWeather,\r\n    loadCity,\r\n    getCityName,\r\n    setTrueFromFavorite\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CitySearch);\r\n","import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  CardText,\r\n  Button\r\n} from \"reactstrap\";\r\nimport { connect } from 'react-redux';\r\nimport { addFavorite } from '../actions';\r\n\r\nclass MainCard extends React.Component {\r\n  state = {\r\n    addToFavorites: \"Add to Favorites\",\r\n    disabled: false\r\n  }\r\n\r\n/*   componentWillMount() {\r\n    debugger\r\n    if (this.props.favorites.map(c => c.name === this.props.currCity)) {\r\n      this.setState({\r\n        addToFavorites: \"Added!\"\r\n      })\r\n      this.setState({\r\n        disabled: true\r\n      })\r\n    }\r\n  } */\r\n  render() {\r\n    if (this.props.currweather.length === 0) {\r\n      return (\r\n        <>\r\n          <div></div>\r\n        </>\r\n      )\r\n    } else {\r\n      return (\r\n        <>\r\n          <Card className='maincardDiv'>\r\n            <CardBody>\r\n              <CardTitle tag=\"h3\">{this.props.currCity}</CardTitle>\r\n              <CardSubtitle className=\"mb-2 \">\r\n                {this.props.currweather.Headline.Text}\r\n              </CardSubtitle>\r\n              <img src={this.props.currweather.DailyForecasts[0].Day.Icon}></img>\r\n              <CardText><h4>{this.props.currweather.DailyForecasts[0].Temperature.Minimum.Value} °{this.props.currweather.DailyForecasts[0].Temperature.Minimum.Unit} </h4></CardText>\r\n              <Button disabled={this.state.disabled} className=\"btn-round\" color=\"primary\" onClick={this.addToFavorite.bind(this)}>\r\n                {this.state.addToFavorites}\r\n                <i className=\"fa fa-heart\" />\r\n              </Button>\r\n            </CardBody>\r\n          </Card>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n\r\n  updateState() {\r\n    debugger\r\n    this.setState({ addToFavorites: 'Added!' })\r\n  }\r\n  addToFavorite() {\r\n    var myCity = {\r\n      name: this.props.currCity,\r\n      key: this.props.currweather.cityKey\r\n    }\r\n    var myFavoritesArr = this.props.favorites;\r\n    if (typeof myFavoritesArr == \"string\") {\r\n      myFavoritesArr = JSON.parse(myFavoritesArr)\r\n    }\r\n    const { addFavorite } = this.props;\r\n    myFavoritesArr.push(myCity)\r\n    addFavorite(myFavoritesArr);\r\n    this.setState({ addToFavorites: 'Added!' })\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    currweather: state.weather.weather,\r\n    currCity: state.cityName.cityName,\r\n    favorites: state.myFavorites.myFavorites,\r\n    unit: state.unit.unit,\r\n\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  addFavorite\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainCard);\r\n\r\n\r\n","import React from 'react';\r\n\r\nclass Loading extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='loadingContainer'>\r\n                <div id='loading'></div>\r\n            </div>\r\n   )}\r\n}\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { Card, CardBody, CardTitle, CardSubtitle, CardText, CardLink } from 'reactstrap';\r\nimport {loadWeather} from '../actions';\r\nimport Loading from './Loading';\r\n\r\nclass Daily extends React.Component {\r\n\r\n\r\n    render() {\r\n        if (this.props.currweather.length === 0)  {\r\n            return (\r\n                <>\r\n                <Loading/>\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n\r\n                this.props.currweather.DailyForecasts.map(w =>\r\n                    <Card className='dailyContainer'>\r\n                        <CardBody>\r\n                            <CardTitle>{w.weekday}</CardTitle>\r\n                            <CardText><img src={w.Day.Icon}></img>\r\n                            </CardText>\r\n                            <CardText>{w.Temperature.Minimum.Value} °{w.Temperature.Minimum.Unit} </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                )\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currweather: state.weather.weather,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadWeather,\r\n    // updateBook\r\n}\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         setBooks : () => dispatch(setBooks()),\r\n//         // updateBook : (book) => dispatch(updateBook(book))\r\n//     }\r\n// }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Daily);","import React from 'react';\r\nimport MainCard from './MainCard'\r\nimport Daily from './DailyCards'\r\nimport { connect } from 'react-redux';\r\nimport CitySearch from './CitySearch';\r\n\r\nclass HomePage extends React.Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className='mainDivContainer'>\r\n          <div className='citySearchContainer'>\r\n            <CitySearch />\r\n          </div>\r\n          <MainCard />\r\n          <div className='dailyCardsContainer'>\r\n            <Daily />\r\n          </div>\r\n        </div>\r\n      </>);\r\n  }\r\n} const mapStateToProps = (state) => {\r\n  return {\r\n    currweather: state.weather.weather,\r\n    favorites: state.myFavorites.myFavorites,\r\n    currCity: state.cityName.cityName,\r\n\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { Card, CardBody, CardTitle, CardText, Button } from 'reactstrap';\r\nimport { updateUnit, getFavorite, loadWeather, loadFavoriteWeather, addFavorite, loadCity, setTrueFromFavorite, getCityName } from '../actions';\r\nimport Loading from './Loading'\r\n\r\nclass Favorites extends React.Component {\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const {\r\n            myFavorites,\r\n            unit\r\n        } = this.props\r\n\r\n        let favoritesArray = this.props.myFavorites\r\n        if (favoritesArray === undefined) {\r\n\r\n        } else {\r\n            var type = (typeof this.props.myFavorites)\r\n            console.log(type);\r\n\r\n            if (type === \"string\") {\r\n                myFavorites = JSON.parse(favoritesArray)\r\n            }\r\n            if (myFavorites !== prevProps.myFavorites ||\r\n                unit !== prevProps.unit) {\r\n\r\n                const { loadFavoriteWeather } = this.props\r\n                loadFavoriteWeather(myFavorites, unit)\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.props.favoritesWeather.length === undefined ||\r\n            this.props.favoritesWeather.length !== this.props.myFavorites.length) {\r\n            return (\r\n                <>\r\n                    <Loading />\r\n                </>\r\n            )\r\n        }\r\n        else if (this.props.favoritesWeather.length === 0) {\r\n            return (\r\n                <div style={{    \r\n                    display: 'flex',\r\n                    width: '100%'}}>\r\n                    <Card style={{\r\n                        margin: 'auto',\r\n                        width: '250px',\r\n                        backgroundColor:'rgba(255, 255, 255, 0.8)'\r\n                    }}>\r\n                        <CardBody>  \r\n                            <CardText>\r\n                                You have nothing in your Favorites, go back to add locations!\r\n                            </CardText>\r\n                            <Button className=\"btn-round btn-icon\" color=\"primary\" onClick={this.goHome.bind(this)}>\r\n                                <i class=\"fas fa-home\"></i>\r\n                            </Button>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n            )\r\n        }\r\n        else if (this.props.favoritesWeather.length === this.props.myFavorites.length) {\r\n            return (\r\n                <div>\r\n                    <hi className='favoritesText text-primary'>Favorites</hi>\r\n\r\n                    {this.props.favoritesWeather.map(w =>\r\n                        <Card key={w.key} className='favoritesCards' >\r\n                            <CardBody>\r\n                                <CardTitle onClick={this.getFavWeather.bind(this, w.DailyForecasts[0].key, w.DailyForecasts[0].city)}>{w.DailyForecasts[0].city}</CardTitle>\r\n                                <CardText><img src={w.DailyForecasts[0].Day.Icon}></img>\r\n                                </CardText>\r\n                                <CardText>{w.DailyForecasts[0].Temperature.Minimum.Value} °{w.DailyForecasts[0].Temperature.Minimum.Unit} </CardText>\r\n                                <Button className=\"btn-round btn-icon\" color=\"primary\" onClick={this.removeFromFavorites.bind(this, w.DailyForecasts[0].city)}>\r\n                                    <i className=\"fa fa-trash-alt\" />\r\n                                </Button>\r\n                            </CardBody>\r\n                        </Card>\r\n                    )}</div>\r\n            );\r\n        }\r\n    }\r\ngoHome(){\r\n    this.props.history.push('/home')\r\n}\r\n    getFavWeather(cityKey, cityName) {\r\n        const { loadWeather, setTrueFromFavorite, getCityName } = this.props\r\n        loadWeather(cityKey, this.props.unit)\r\n        setTrueFromFavorite(true)\r\n        getCityName(cityName)\r\n        this.props.history.push('/home')\r\n    }\r\n    removeFromFavorites(city) {\r\n        let myRemoved = this.props.myFavorites\r\n        myRemoved = myRemoved.filter(c => c.name != city);\r\n        if (myRemoved.length === 0) {\r\n            const { addFavorite } = this.props\r\n            addFavorite([])\r\n        } else {\r\n            for (let i = 0; i < myRemoved.length; i++) {\r\n                const { addFavorite, loadFavoriteWeather } = this.props\r\n                addFavorite(myRemoved);\r\n                var myfaveArray = this.props.myFavorites;\r\n                if (typeof myfaveArray === 'string') {\r\n                    myfaveArray = JSON.parse(myfaveArray)\r\n                    loadFavoriteWeather(myfaveArray, this.props.unit)\r\n                }\r\n                else {\r\n                    loadFavoriteWeather(this.props.myFavorites, this.props.unit)\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        citysuggetions: state.citySuggetions.citySuggetions,\r\n        favoritesWeather: state.favoritesWeather.favoritesWeather,\r\n        myFavorites: state.myFavorites.myFavorites,\r\n        unit: state.unit.unit,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateUnit,\r\n    getFavorite,\r\n    loadFavoriteWeather,\r\n    addFavorite,\r\n    loadCity,\r\n    loadWeather,\r\n    getCityName,\r\n    setTrueFromFavorite\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);","import React from \"react\";\r\nimport {\r\n  UncontrolledCollapse,\r\n  NavbarBrand,\r\n  Navbar,\r\n  NavItem,\r\n  NavLink,\r\n  Nav,\r\n  Container,\r\n  Button\r\n} from \"reactstrap\";\r\nimport CitySearch from './CitySearch';\r\nimport { connect } from 'react-redux';\r\nimport { updateUnit, getFavorite, getDefaultCity, loadCity, loadWeather, loadFavoriteWeather, setTrueFromFavorite } from '../actions';\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\nimport HomePage from './HomePage';\r\nimport Favorites from './Favorites';\r\n\r\n\r\nclass WeatherNavbar extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      unitType: 'C',\r\n      unit: 'true'\r\n\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    const { getFavorite } = this.props;\r\n    getFavorite();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const {\r\n      isTrue,\r\n    } = this.props\r\n    if (isTrue === false) {\r\n      const {\r\n        cityName,\r\n        unit\r\n      } = this.props\r\n      if (cityName !== prevProps.cityName ||\r\n        unit !== prevProps.unit) {\r\n        const {\r\n          loadCity\r\n        } = this.props\r\n        loadCity(this.props.cityName)\r\n      }\r\n      const {\r\n        citysuggetions,\r\n        loadWeather,\r\n          loadCity\r\n      } = this.props\r\n      if (citysuggetions !== prevProps.citysuggetions) {\r\n        for (let i = 0; i < this.props.citysuggetions.length; i++) {\r\n          if (this.props.cityName === this.props.citysuggetions[i].LocalizedName) {\r\n            loadWeather(this.props.citysuggetions[i].Key, this.props.unit)\r\n            loadCity('');\r\n            return\r\n          } else {\r\n            loadWeather('215854', this.props.unit)\r\n            return\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Navbar className=\"navigationFlex bg-transparent\" expand=\"lg\">\r\n          <Container>\r\n            <button\r\n              className=\"navbar-toggler\"\r\n              id=\"navbarTogglerDemo01\"\r\n              type=\"button\"\r\n            >\r\n              <span className=\"navbar-toggler-bar bar1\"></span>\r\n              <span className=\"navbar-toggler-bar bar2\"></span>\r\n              <span className=\"navbar-toggler-bar bar3\"></span>\r\n            </button>\r\n            <UncontrolledCollapse navbar toggler=\"#navbarTogglerDemo01\">\r\n              <NavbarBrand>\r\n                Weather\r\n            </NavbarBrand>\r\n              <Nav className=\"mr-auto mt-2 mt-lg-0\" navbar>\r\n                <NavItem>\r\n                  <NavLink href={`${process.env.PUBLIC_URL}/home`}>\r\n                    Home <span className=\"sr-only\">(current)</span>\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink href={`${process.env.PUBLIC_URL}/favorites`} >\r\n                    Favorites\r\n                </NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n              <Button className=\"btn-round\" color=\"primary\" onClick={this.changeUnit.bind(this)}>°{this.state.unitType}</Button>\r\n            </UncontrolledCollapse>\r\n          </Container>\r\n        </Navbar>\r\n        <Router>\r\n\r\n          <Switch>\r\n            <Route path={`${process.env.PUBLIC_URL}/home`} component={HomePage} />\r\n            <Route path={`${process.env.PUBLIC_URL}/favorites`} component={Favorites} />\r\n            {/* <Redirect from='/' to={`${process.env.PUBLIC_URL}/home`} /> */}\r\n          </Switch>\r\n        </Router>\r\n      </>\r\n    );\r\n  }\r\n  changeUnit() {\r\n    if (this.state.unit === 'false') {\r\n      this.setState({ unit: 'true' })\r\n      this.setState({ unitType: 'C' })\r\n    } else {\r\n      this.setState({ unit: 'false' })\r\n      this.setState({ unitType: 'F' })\r\n    }\r\n    const { updateUnit } = this.props\r\n    updateUnit(this.state.unit)\r\n  }\r\n\r\n\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    myFavorites: state.myFavorites.myFavorites,\r\n    unit: state.unit.unit,\r\n    cityName: state.cityName.cityName,\r\n    citysuggetions: state.citySuggetions.citySuggetions,\r\n    cityWeather: state.weather,\r\n    isTrue: state.fromFavorites.isTrue\r\n\r\n\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n\r\n  updateUnit,\r\n  getFavorite,\r\n  loadFavoriteWeather,\r\n  getDefaultCity,\r\n  loadWeather,\r\n  loadCity,\r\n  setTrueFromFavorite\r\n  // updateBook\r\n}\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         setBooks : () => dispatch(setBooks()),\r\n//         // updateBook : (book) => dispatch(updateBook(book))\r\n//     }\r\n// }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherNavbar);","import React from 'react';\nimport './App.css';\nimport WeatherNavbar from './comps/WeatherNavbar';\nimport { connect } from 'react-redux';\nimport { getDefaultCity } from './actions';\nvar Night = require('./back.jpg');\nvar Day = require('./day.jpg');\n\nclass App extends React.Component {\n\n  componentDidMount() {\n    const { getDefaultCity } = this.props;\n    getDefaultCity()\n\n    var now = new Date();\n    var hour = now.getHours();\n    if (hour > 4 && hour < 18) {\n      document.body.style.backgroundImage = 'url(' + Day + ')';\n\n    } else {\n      document.body.style.backgroundImage = 'url(' + Night + ')';\n    }\n\n\n  }\n  render() {\n    return (\n      <>\n        <WeatherNavbar />\n      </>);\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    cityName: state.cityName.cityName,\n  }\n}\n\nconst mapDispatchToProps = {\n  getDefaultCity,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const INITIAL_STATE = {\r\n    weather: [],\r\n\r\n}\r\n\r\nexport default function weatherReducer(state = INITIAL_STATE, action) {\r\n\r\n    switch(action.type) {\r\n        case 'SET_WEATHER':\r\n            \r\n            return {\r\n                ...state,\r\n                weather: action.weather\r\n            }\r\n            default:\r\n                return state\r\n    }\r\n}\r\n","const INITIAL_STATE = {\r\n    citySuggetions: [],\r\n}\r\n\r\n\r\n\r\nexport default function cityAutoCompleteReducer(state = INITIAL_STATE, action) {\r\n    switch(action.type) {\r\n        case 'SET_SUGGETIONS':\r\n            return {\r\n                ...state,\r\n                citySuggetions: action.citySuggtions\r\n            }\r\n            default:\r\n                return state\r\n    }\r\n}\r\n","const INITIAL_STATE = {\r\n    cityKey:''\r\n}\r\n\r\nexport default function cityKeyReducer(state = INITIAL_STATE, action) {\r\n    switch(action.type) {\r\n        case 'SET_KEY':\r\n            return {\r\n                ...state,\r\n                CityKey: action.CityKey\r\n            }\r\n            default:\r\n                return state\r\n    }\r\n}\r\n","const INITIAL_STATE = {\r\n    unit: true,\r\n\r\n}\r\n\r\nexport default function weatherReducer(state = INITIAL_STATE, action) {\r\n    switch(action.type) {\r\n        case 'SET_UNIT':\r\n            \r\n            return {\r\n                ...state,\r\n                unit: action.unit\r\n            }\r\n            default:\r\n                return state\r\n    }\r\n}\r\n","const INITIAL_STATE = {\r\n    cityName: '',\r\n}\r\n\r\nexport default function getCityName(state = INITIAL_STATE, action) {\r\n    switch(action.type) {\r\n        case 'GET_CITY_NAME':\r\n            return {\r\n                ...state,\r\n                cityName: action.cityName\r\n            }\r\n            default:\r\n                return state\r\n    }\r\n}\r\n","const INITIAL_STATE = {\r\n    Favorites: [],\r\n}\r\n\r\nexport default function setFavorites(state = INITIAL_STATE, action) {\r\n    switch(action.type) {\r\n        case 'SET_FAVORITES':\r\n            return {\r\n                ...state,\r\n                Favorites: action.Favorites\r\n            }\r\n            default:\r\n                return state\r\n    }\r\n}\r\n\r\n","const INITIAL_STATE = {\r\n    myFavorites: [],\r\n}\r\n\r\nexport default function getFavoritesFromLocalStorage(state = INITIAL_STATE, action) {\r\n    switch(action.type) {\r\n        case 'GET_FAVORITES':\r\n            return {\r\n                ...state,\r\n                myFavorites: action.myFavorites\r\n            }\r\n            default:\r\n                return state\r\n    }\r\n}\r\n ","const INITIAL_STATE = {\r\n    favoritesWeather: [],\r\n\r\n}\r\n\r\nexport default function favoritesWeatherReducer(state = INITIAL_STATE, action) {\r\n    switch (action.type) {\r\n        case 'GET_FAVORITES_WEATHER':\r\n\r\n            return {\r\n                ...state,\r\n                favoritesWeather: action.favoritesWeather\r\n            }\r\n        case 'REMOVE_FAVORITES_WEATHER':\r\n\r\n            return {\r\n                ...state,\r\n                favoritesWeather: action.favoritesWeather\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","const INITIAL_STATE = {\r\n    isTrue: false,\r\n\r\n}\r\n\r\nexport default function fromFavoReducer(state = INITIAL_STATE, action) {\r\n    switch(action.type) {\r\n        case 'SET_TRUE':\r\n            \r\n            return {\r\n                ...state,\r\n                isTrue: action.isTrue}\r\n            default:\r\n                return state\r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport  weatherReducer  from './weatherReducer';\r\nimport  cityAutoCompleteReducer  from './cityAutoCompleteReducer';\r\nimport  cityKeyReducer  from './cityKeyReducer';\r\nimport  unitReducer  from './unitReducer';\r\nimport  cityNameReducer  from './cityNameReducer';\r\nimport  FavoritesReducer  from './FavoritesReducer';\r\nimport  LocalStorageReducer  from './getLocalStorage';\r\nimport favoritesWeatherReducer from './favoritesWeatherReducer';\r\nimport fromFavoReducer from './FromFavo';\r\n\r\n\r\n\r\nconst allReducers = combineReducers({\r\n    weather: weatherReducer,\r\n    citySuggetions: cityAutoCompleteReducer,\r\n    cityKey: cityKeyReducer,\r\n    unit: unitReducer,\r\n    cityName: cityNameReducer,\r\n    Favorites: FavoritesReducer,\r\n    myFavorites: LocalStorageReducer,\r\n    favoritesWeather: favoritesWeatherReducer,\r\n    fromFavorites:fromFavoReducer\r\n}\r\n);\r\n\r\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport allReducers from './reducers';\nimport './assets/css/bootstrap.min.css';\nimport \"./assets/css/now-ui-kit.css\";\nimport thunk  from 'redux-thunk'\nimport \"./assets/demo/demo.css\";\n\n\n\nconst store =createStore(allReducers ,\n    applyMiddleware(thunk));\n\nReactDOM.render(\n<Provider store = {store}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}